// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;

# TransactionDetailsResponse
public type TransactionDetailsResponse record {
    QueryHeader header?;
    TransactionDetailsResponseBody body?;
};

public type TaxDistributionResponseBodyInner record {
    # Indicates the total amount of taxes applicable for the transaction
    @constraint:String {maxLength: 20}
    string totalTax?;
    # Indicates the currency of the transaction. For example GBP, USD etc
    @constraint:String {maxLength: 3}
    string transactionCurrency?;
    # Indicates the extension data
    record {} extensions?;
    # Specifies details about taxes for a party
    TaxDistributionResponseBodyInner_taxDetails[] taxDetails?;
    # Holds the total amount
    @constraint:String {maxLength: 20}
    string netAmount?;
    # Contains the transaction amount. This is based on the currency, either local or foreign currency
    @constraint:String {maxLength: 20}
    string transactionAmount?;
    # Identifier of the customer
    @constraint:String {maxLength: 10}
    string customerId?;
    # Contains the gross amount
    @constraint:String {maxLength: 20}
    string grossAmount?;
};

public type AccountTransactionsResponseBodyInner record {
    # Contains the stock exchange details where a particular security is usually dealt
    string stockExchange?;
    # This is the payment amount
    decimal amount?;
    # Notes to facilitate the use of the function
    string notes?;
    # A system generated unique identifier for the image record
    string imageId?;
    # The nominal quantity
    decimal quantity?;
    # Display name or short name of the account specified
    string accountName?;
    # Contains the identifier for the transaction in the core system
    string transactionReference?;
    # Contains the name used for display or enrichment purposes
    @constraint:String {maxLength: 35}
    string displayName?;
    # The additional text printed on descriptive statements in addition to the standard narrative and/or reference
    string narrative?;
    # Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)
    string valueDate?;
    # Cheque number associated with the transaction or accounting entry
    @constraint:Number {maxValue: 50}
    decimal chequeNumber?;
    # The international securities identification number of the instrument
    @jsondata:Name {value: "ISIN"}
    string iSIN?;
    # Identifies the transaction type applicable to the transaction being processed, i.e. outward or inward payment. For example: ACPX, OTPX etc
    @constraint:String {maxLength: 10}
    string transactionType?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Indicates the extension data
    record {} extensions?;
    # The monetary value of each balance type for an account is itemised
    decimal balance?;
    # Indicates the date on which this business activity is booked in the underlying system. The effective date and booking date could be different if systems allow forward/back dated business transactions. Dates are expected in YYYYMMDD format. If booking date is not passed, effective date would be assumed as booking date
    string bookingDate?;
    # Based on documentCode, the field defaults the required document codes
    string documentId?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    string currencyId?;
    # Contains the name of the account, basically the short title of the account
    string shortName?;
    # It is the transaction reference. This is the identifier of the transaction on Temenos Core Banking system
    string entryReference?;
};

public type TransactionDetailsResponseBodyInner_credits record {
    # Specifies the credit currency. For example: USD, EUR etc.
    string creditCurrencyId?;
    # Amount to be credited in a payment transaction
    string creditAmount?;
    # Reference quoted by the credit account for a payment
    string creditValueDate?;
    # Credit account identifier of the payment or transaction
    string creditAccountId?;
    # Indicates the IBAN of the credit account
    string creditAccountIBAN?;
};

public type TransactionDetailsResponseBody TransactionDetailsResponseBodyInner[];

# StatementForTransactionResponse
public type StatementForTransactionResponse record {
    QueryHeader header?;
    StatementForTransactionResponseBody body?;
};

public type QueryHeader record {
    QueryHeaderAudit audit?;
    # The record from which the response should be displayed
    @jsondata:Name {value: "page_start"}
    int:Signed32 pageStart?;
    # The total number of records present
    @jsondata:Name {value: "total_size"}
    int:Signed32 totalSize?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @jsondata:Name {value: "page_token"}
    string pageToken?;
    # Status of the API(success/failed)
    string status?;
    # The total number of records per page
    @jsondata:Name {value: "page_size"}
    int:Signed32 pageSize?;
};

# TaxDistributionResponse
public type TaxDistributionResponse record {
    QueryHeader header?;
    TaxDistributionResponseBody body?;
};

public type TaxDistributionResponseBody TaxDistributionResponseBodyInner[];

public type QueryHeaderAudit record {
    # Time taken to response by Transact
    @jsondata:Name {value: "T24_time"}
    int:Signed32 t24Time?;
    # Time taken to parse the response by IRIS
    @jsondata:Name {value: "responseParse_time"}
    decimal responseParseTime?;
    # The CURR.NO. of the record
    string versionNumber?;
    # Time taken to parse the request by IRIS
    @jsondata:Name {value: "requestParse_time"}
    decimal requestParseTime?;
};

public type StatementForTransactionResponseBodyInner record {
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    @constraint:String {maxLength: 11}
    string accountId?;
    StatementForTransactionResponseBodyInner_images[] images?;
    # This is the payment amount
    decimal amount?;
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    @constraint:String {maxLength: 11}
    string companyId?;
    # Indicates the extension data
    record {} extensions?;
    # Notes to facilitate the use of the function
    @constraint:String {maxLength: 11}
    string notes?;
    # Display name or short name of the account specified
    @constraint:String {maxLength: 11}
    string accountName?;
    # The additional text printed on descriptive statements in addition to the standard narrative and/or reference
    @constraint:String {maxLength: 11}
    string narrative?;
    # Indicates the date on which this business activity is booked in the underlying system. The effective date and booking date could be different if systems allow forward/back dated business transactions. Dates are expected in YYYYMMDD format. If booking date is not passed, effective date would be assumed as booking date
    string bookingDate?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    @constraint:String {maxLength: 11}
    string currencyId?;
    # It is the transaction reference. This is the identifier of the transaction on Temenos Core Banking system
    @constraint:String {maxLength: 11}
    string entryReference?;
    # Unique transaction identifier for retrieving the details of the transaction. For example: FT0102030333 etc
    @constraint:String {maxLength: 11}
    string transactionId?;
};

public type StatementForTransactionResponseBody StatementForTransactionResponseBodyInner[];

# Represents the Headers record for the operation: getAccountTransactions
public type GetAccountTransactionsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# Represents the Headers record for the operation: getStatementForTransaction
public type GetStatementForTransactionHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type TransactionDetailsResponseBodyInner_beneficiaries record {
    # International Bank Account Number (IBAN) of the beneficiary account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189
    string beneficiaryIBAN?;
    # Unique account identifier of the beneficiary account number.
    string beneficiaryAccountId?;
    # Identifies the Customer who is to be the ultimate receiver of the funds transferred by the sending bank when this Beneficiary is not a bank.
    string beneficiaryCustomerId?;
    # Bank for the beneficiary
    string beneficiaryBank?;
};

# Represents the Queries record for the operation: getAccountTransactions
public type GetAccountTransactionsQueries record {
    # Contains the total number of statement to be returned per page
    string statementPageSize?;
    # Indicator to skip retrieval of masked entry details. Example, reversal entries of a transaction. Allowed values are Yes or Y
    string suppressMaskEntries?;
    # Contains the name used for display or enrichment purposes
    string displayName?;
    # The maximum account balance allowed
    string maximumAmount?;
    # Contains the record from which the statement must be displayed
    string statementPageNumber?;
    # Identifies the system internal transaction code applicable to the transaction
    string transactionCode?;
    # Start date of the loan
    string dateFrom?;
    # Cheque number associated with the transaction or accounting entry
    string chequeNumber?;
    # Indicates the transaction search type
    string listType;
    # Indicates the method in which the statement entries are to be sorted. Possible values oldest/latest. Oldest - displays the entries in ascending timestamp order. Latest - displays the entries in descending timestamp order
    string statementSortMethod?;
    # Indicates the entry from which the transaction history needs to be retrieved. If an end date is not specified, transactions from delta list till 'today' are retrieved
    string entryReferenceFrom?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # Indicates the identifier of payment types for  letter of credit
    string payType?;
    # Indicates the criteria for the range operation search on cheque numbers
    string chequeNumberRange?;
    # Indicates to skip retrieval of image specific details for a statement reference. Accept Values YES, NO or NULL
    string skipImageDetails?;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Identifier of the customer
    string customerId?;
    # End date of the loan
    string dateTo?;
    # The minimum account balance required
    string minimumAmount?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Indicates the total number of transactions
    string transactionCount?;
    # It is the transaction reference. This is the identifier of the transaction on Temenos Core Banking system
    string entryReference?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

# Represents the Queries record for the operation: getStatementForTransaction
public type GetStatementForTransactionQueries record {
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Provides Auth configurations needed when communicating with a remote HTTP endpoint.
    http:CredentialsConfig|ApiKeysConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional, 
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

public type StatementForTransactionResponseBodyInner_images record {
    # Based on documentCode, the field defaults the required document codes
    @constraint:String {maxLength: 11}
    string documentId?;
    # A system generated unique identifier for the image record
    @constraint:String {maxLength: 11}
    string imageId?;
    # Indicates the internal classification of images - such as Photographs, Documents, Passports, etc..,
    @constraint:String {maxLength: 11}
    string imageType?;
};

# Represents the Queries record for the operation: calculateTaxDistribution
public type CalculateTaxDistributionQueries record {
    # Indicates the distribution method used to calculate applicable taxes for the transaction. Possible values are NET and GROSS
    string taxDistributionIndicator?;
    # Indicates the tax rate to be applied on a transaction
    string taxRate?;
    # Indicates the currency of the transaction. For example GBP, USD etc
    string transactionCurrency;
    # Contains the transaction amount. This is based on the currency, either local or foreign currency
    string transactionAmount;
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Identifier of the customer
    string customerId?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # Represents a reference on the TAX table which will indicate the rate to be used for computation of taxation for the associated property
    string taxCode?;
    # Indicates the tax applicable for the transaction for a tax type
    string taxAmount?;
    # Indicates the tax identification type for the customer, ex-SSN, TIN, FTIN etc
    string taxType?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type TransactionDetailsResponseBodyInner_debits record {
    # The currency of the debit side in payment transaction. 
    string debitCurrencyId?;
    # Amount to be debited in a payment transaction
    string debitAmount?;
    # Date on which the amount will be debited for settlement
    string debitValueDate?;
    # Indicates the debit account number of the payment or transaction.
    string debitAccountId?;
    # International Bank Account Number (IBAN) of the debtor account, required only for International transfers/payments outside the Bank. For example: GB98 MIDL07009312345678, FR7630006000011234567890189
    string debitAccountIBAN?;
};

# Represents the Headers record for the operation: calculateTaxDistribution
public type CalculateTaxDistributionHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

public type AccountTransactionsResponseBody AccountTransactionsResponseBodyInner[];

# Represents the Queries record for the operation: getTransactionDetails
public type GetTransactionDetailsQueries record {
    # The record from which the response should be displayed
    @http:Query {name: "page_start"}
    int:Signed32 pageStart?;
    # Unique id expected to get as part of response from Transact on every enquiry request
    @http:Query {name: "page_token"}
    string pageToken?;
    # The total number of records per page
    @http:Query {name: "page_size"}
    int:Signed32 pageSize?;
};

public type TransactionDetailsResponseBodyInner record {
    # The ISO code (3 letters) for the institution's local currency
    string localCurrencyId?;
    # Debit value of the transaction 
    TransactionDetailsResponseBodyInner_debits[] debits?;
    # Contains the identifier for the transaction in the core system
    string transactionReference?;
    # The additional text printed on descriptive statements in addition to the standard narrative and/or reference
    string narrative?;
    # The date when payment instruction is processed in system
    string processingDate?;
    # Contains the date from which the payment is expected and is used to indicate the exposure date for the payment
    string clearingDate?;
    # Indicates the charge types which are applicable for the transaction. Example: CORRBKCHG
    string chargeType?;
    # The name of the bank being referred to
    string bankName?;
    # Indicates the value date on which the underlying accounting entry is to be given value (for interest purposes)
    string valueDate?;
    # The transaction description
    string transactionName?;
    # Cheque number associated with the transaction or accounting entry
    string chequeNumber?;
    # Identifier of the account. Often referred to as the account number, yet for consistency this is always referred to as accountId. Accepts both IBAN & BBAN
    string accountId?;
    # This is a system populated field to display the date on which MT740 (Authorization to Reimburse) was sent
    string dateOfOriginalAuthorisation?;
    # Indicates the extension data
    record {} extensions?;
    # Credit value of the transaction
    TransactionDetailsResponseBodyInner_credits[] credits?;
    # The exchange rate that is actually applied for currency conversion in case of transactions involving FX conversion. 
    string customerRate?;
    # Indicates the date on which this business activity is booked in the underlying system. The effective date and booking date could be different if systems allow forward/back dated business transactions. Dates are expected in YYYYMMDD format. If booking date is not passed, effective date would be assumed as booking date
    string bookingDate?;
    # Retrieves the charge amount after redeem
    string chargeAmount?;
    # Identifier of the currency. This is the 3-letter ISO 4217 code of the currency
    string currencyId?;
    # Identifies the Beneficiary name and address of the Standing Order
    TransactionDetailsResponseBodyInner_beneficiaries[] beneficiaries?;
    # It is the transaction reference. This is the identifier of the transaction on Temenos Core Banking system
    string entryReference?;
};

public type TaxDistributionResponseBodyInner_taxDetails record {
    # Indicates the tax identification type for the customer, ex-SSN, TIN, FTIN etc.
    @constraint:String {maxLength: 60}
    string taxType?;
    # Represents a reference on the TAX table which will indicate the rate to be used for computation of taxation for the associated property
    @constraint:String {maxLength: 35}
    string taxCode?;
    # Indicates the tax rate to be applied on a transaction.
    @constraint:String {maxLength: 35}
    string taxRate?;
    # Indicates the tax applicable for the transaction for a tax type.
    @constraint:String {maxLength: 60}
    string taxAmount?;
};

# Represents the Headers record for the operation: getTransactionDetails
public type GetTransactionDetailsHeaders record {
    # Identifier of the lead company of the underlying Entity/Company/Branch for the respective contract for customer data protection purposes. Example US0010001
    string companyId?;
    # Username and password to authenticate the API against core-banking
    string credentials?;
    # Indicates the pagination header attributes availability. If set to 'true', it fetches all the data
    boolean disablePagination?;
    # User who initiated the transaction
    string userRole?;
    # Identifies the device type
    string deviceId?;
};

# AccountTransactionsResponse
public type AccountTransactionsResponse record {
    QueryHeader header?;
    AccountTransactionsResponseBody body?;
};

# Provides API key configurations needed when communicating with a remote HTTP endpoint.
public type ApiKeysConfig record {|
    string apikey;
|};
